package utilities;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;

import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import java.io.*;
import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import static utilities.LMCenter_Constants.*;

public class SystemUtil_ANSYS 
{
	public static String[] xmlMsg = loadAllXMLMessages();
	
	//License File names
	
	//public static final String LF_INVOKE_LMGRD_ERROR = "D:/workspace/DashboardTests/dataANSYS"+ getHostNameWithPathSeparators() + "lmgrdErrorMsg.lic";
	
	private static String getXmlFilePath() {
		if(isWindowsOS())
			return "C:\\Program Files\\ANSYS Inc\\Shared Files\\Licensing\\tools\\lmcenter\\language\\en-us\\lmcenter_msgs.xml";
		else
			return "/licregs/shared_files/licensing/tools/lmcenter/language/en-us/lmcenter_msgs.xml";
	}
	
	
	public static String getXmlMsg(int msgId) {
		return xmlMsg[msgId];
	}
	
	
	
    public static void buildFile(String logLocation, String[] textToWrite) throws IOException {
	       BufferedWriter input = new BufferedWriter(new FileWriter(logLocation));
			try {
		        for(int i = 0; i < textToWrite.length; i++)
		        	input.write(textToWrite[i] + "\n");
		      
		        input.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
	}
    
 


    public static void assertFalse(boolean assertFalse)
	{
		org.junit.Assert.assertFalse(assertFalse);
	}
    
	public static void assertTrue(boolean assertTrue)
	{
		org.junit.Assert.assertTrue(assertTrue);
	}

	
	//=================================================================================================================
	// PRIVATE METHODS
	//=================================================================================================================
	private static String[] loadAllXMLMessages() {
		try {
			File fXmlFile = new File(getXmlFilePath());
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(fXmlFile);
			doc.getDocumentElement().normalize();
			NodeList nodeList = doc.getElementsByTagName("MESSAGE");
			ArrayList<String> xmlMessages = new ArrayList<String>();
			int id;
			for (int index = 0; index < nodeList.getLength();  index++) {
				Node node = nodeList.item(index);
				Element element = (Element) node;
				id = Integer.parseInt(element.getElementsByTagName("ID").item(0).getTextContent().trim());
				
				if(id > xmlMessages.size())
					xmlMessages = increaseCapacity(id + 1, xmlMessages);
				
				xmlMessages.add(id,element.getElementsByTagName("MSG").item(0).getTextContent().trim());
				//Special case processing for XML Message ID 85 because it contains white spaces that are not shown in the LMCenter GUI. 
				if(id == 85)
					xmlMessages.add(id,element.getElementsByTagName("MSG").item(0).getTextContent().trim().replaceAll("  ", ""));
			}		
			return xmlMessages.toArray(new String[xmlMessages.size()]);
		} catch(Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	private static ArrayList<String> increaseCapacity(int newSize, ArrayList<String> xmlMessages) {
		
		for(int i = 0; i < newSize; i++)
			if(i >= xmlMessages.size() || xmlMessages.get(i) == null)
				xmlMessages.add(i,"");
		return xmlMessages;
	}

	private static boolean isWindowsOS() {
		return (System.getProperty("os.name").contains("Windows")) ? true : false;
	}
	
	private static boolean isLinuxOS() {
		return (System.getProperty("os.name").contains("Linux")) ? true : false;		
	}
	
	static boolean isProcessRunningOnWindows(String processName) {
		try {
	        Process proc = Runtime.getRuntime().exec("tasklist /FI \"IMAGENAME eq " + processName + ".exe\" /FO CSV /NH");
	        BufferedReader input = new BufferedReader(new InputStreamReader(proc.getInputStream()));
	        String line = input.readLine();
	        while(line != null && line != "") {
	            if(line.contains(processName)) {
	              input.close();
	              return true;
	            }
	            if(line.contains("INFO: No tasks")) {
	              input.close();
	              return false;
	            }
	            line = input.readLine();
	        } 
	        input.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
        return false;
	}
	
	static boolean isProcessRunningOnNIX(String processName) {
        try {
            String[] cmd = {"/bin/sh","-c","ps -w -w -ef | grep \""+processName+"\""};           
            Process proc = Runtime.getRuntime().exec(cmd);
            BufferedReader input = new BufferedReader(new InputStreamReader(proc.getInputStream()));
            String line = input.readLine();
            while(line != null) {
                if(line.contains("grep")) line = input.readLine();
                else if (line.contains(processName)) {
                	input.close();
                	return true;
                }
            }
        } catch (Exception e) {
        	e.printStackTrace();
            return false;
        }
        return false;
    }
	
	private static boolean processLogContainsName(Process proc, String processName) {
        BufferedReader input = new BufferedReader(new InputStreamReader(proc.getInputStream()));
		try {
	        String line = input.readLine();
	        while(line != null && line != "") {
	            if(line.contains(processName)) {
	              input.close();
	              return true;
	            }
	            line = input.readLine();
	        } 
	        input.close();
		} catch(Exception e) {
			e.printStackTrace();
		}
        return false;
	}
	
	private static void printProcessLog(Process proc) {
	       BufferedReader input = new BufferedReader(new InputStreamReader(proc.getInputStream()));
			try {
		        String line = input.readLine();
		        while (line != null && line != "") {
		            System.out.println(line);
		            line = input.readLine();
		        } 
		        input.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
	}
}
	
		