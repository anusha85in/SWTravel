package utilities;

import static org.junit.Assert.*;
import static utilities.LMCenter_Constants.*;
import static utilities.SystemUtil_ANSYS.*;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.util.Hashtable;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.firefox.MarionetteDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.WebDriver;

public class SeleniumDriver {
	//private static String browserType = "marionette";
	private static String browserType = "firefox";
	private static String browserTypeIE = "IE";
	private static String browserTypeChrome = "Chrome";
	private static String FFDriverPath = "\\\\cantbsrv\\TestBench_v180\\testsetlib\\Products\\LMCenter\\LMCenterTests\\drivers\\"+ getOSType() + "\\geckodriver.exe";
	private static String chromeDriverPath = "\\\\cantbsrv\\TestBench_v180\\testsetlib\\Products\\LMCenter\\LMCenterTests\\drivers\\"+ getOSType() + "\\chromedriver.exe";
	private static String IEDriverPath = "\\\\cantbsrv\\TestBench_v180\\testsetlib\\Products\\LMCenter\\LMCenterTests\\drivers\\"+ getOSType() + "\\IEDriverServer.exe";
	private static WebDriver browser;
	private static String baseUrl;
	private static String browserSetting;
	public static String ContentId1 = "content-1";
	public static String ContentId2 = "content-2";
	
	protected SeleniumDriver() {
	}
		
	public static void initializeDriver(String url) {
		baseUrl = url;
		//browserSetting = "marionette";
		browserSetting = "firefox";
		browser = getBrowser(browserType);
		browser.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		browser.get(baseUrl);
	}
	
	public static void initializeDriverIE(String url) {
		baseUrl = url;
		browserSetting = "IE";
		browser = getBrowser(browserTypeIE);
		browser.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		browser.get(baseUrl);
	}
	
	public static void initializeDriverChrome(String url) {
		baseUrl = url;
		browserSetting = "chrome";
		browser = getBrowser(browserTypeChrome);
		browser.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		browser.get(baseUrl);
	}
	
	public static void closeDriver() {
		browser.quit();
	}
	
	public static void refreshPage(String url) {
		try {
			Thread.sleep(750);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		browser.get(url);
		try {
			Thread.sleep(750);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	public static void refreshPage() {
		browser.get(browser.getCurrentUrl());
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	public static void verifyTextEquals(String elementLabel, String text) {	
		assertEquals(text, getWebElement(elementLabel).getText());
	}
	
	public static void verifyIconEquals(String elementLabel, String image) {	
	browser.switchTo().defaultContent();
	String elementProperties = getWebElement(elementLabel).getAttribute("style");
	int counter = 0;
	while (! elementProperties.contains(image) && counter < 120)
	{
		try {
			Thread.sleep(500);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		counter++;
		elementProperties = getWebElement(elementLabel).getAttribute("style");
	}
	if(! elementProperties.contains(image) )
	{
		fail("Image expected\" " + image + " \" not in \" " + elementProperties + " \"");
	}
	browser.switchTo().defaultContent();
	}

	
	public static void verifyTextContains(String elementLabel, String text) {
		browser.switchTo().frame(browser.findElement(By.id("content-2")));
		String elementText = getWebElement(elementLabel).getText();
		int counter = 0;
		while (! elementText.contains(text) && counter < 180)
		{
			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			counter++;
			elementText = getWebElement(elementLabel).getText();
		}
		if(! elementText.contains(text) )
		{
			fail("Expected text: \"" + text + "\" not contained in \"" + elementText + "\"");
		}
		browser.switchTo().defaultContent();
	}
	
	public static void verifyTextContains2(String elementLabel, String text) {
		// Brody - I created this for the tests Add_Valid_Triad_LF_Mixed_Case and Add_Valid_Triad_LF
		//This will allow these tests to pass by stripping all whitespace from the strings before comparing them.
		browser.switchTo().frame(browser.findElement(By.id("content-2")));
		String elementText = getWebElement(elementLabel).getText().replaceAll("\\s+","");
		int counter = 0;
		while (! elementText.contains(text.replaceAll("\\s+","")) && counter < 180)
		{
			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			counter++;
			elementText = getWebElement(elementLabel).getText().replaceAll("\\s+","");
		}
		if(! elementText.contains(text.replaceAll("\\s+","")) )
		{
			fail("Expected text: \"" + text.replaceAll("\\s+","") + "\" not contained in \"" + elementText + "\"");
		}
		browser.switchTo().defaultContent();
	}
	
	public static void verifyTextContainsIgnoreCase(String elementLabel, String text) {
		browser.switchTo().frame(browser.findElement(By.id("content-2")));
		String elementText = getWebElement(elementLabel).getText();
		int counter = 0;
		while (! elementText.toUpperCase().contains(text.toUpperCase()) && counter < 180)
		{
			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			counter++;
			elementText = getWebElement(elementLabel).getText();
		}
		if(! elementText.toUpperCase().contains(text.toUpperCase()) )
		{
			fail("Expected text: \"" + text + "\" not contained in \"" + elementText + "\"");
		}
		browser.switchTo().defaultContent();
	}
	
	public static boolean verifyTextContainsOneOfArray(String elementLabel, String[] text) {
		browser.switchTo().frame(browser.findElement(By.id("content-2")));
		String elementText = getWebElement(elementLabel).getText();
		int counter = 0;
		while (counter < 180)
		{
			try {
				for (String mac : text)
				{
					if (elementText.contains(mac))
						return true;
				}
				Thread.sleep(500);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			counter++;
			elementText = getWebElement(elementLabel).getText();
		}
		browser.switchTo().defaultContent();
		fail("Expected text: \"" + text + "\" not contained in \"" + elementText + "\"");
		return false;
	}
	
	public static void verifyTitleEquals(String elementLabel, String text) {
		System.out.println(getWebElement(elementLabel).getAttribute("alt"));
		//browser.findElement(By.)
		//assertEquals(text, title);
	}
	
	public static void findAndClick(String elementLabel) {
		browser.switchTo().defaultContent();
		WebElement element = getWebElement(elementLabel);
		int counter = 0;
		while(element == null && counter < 120)
		{
			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			counter++;
			element = getWebElement(elementLabel);
		}
		if(element == null)
		{
			throw new Error("Cannot find: " + elementLabel);
		}
		try {
			element.click();
		} catch (Exception e) {
			e.printStackTrace();
			throw new Error("Clicking on " + elementLabel + " failed");
		}
		browser.switchTo().defaultContent();
	}
	
	public static void findAndClick(String elementLabel, String contentId) {
		browser.switchTo().frame(browser.findElement(By.id(contentId))); 
		WebElement element = getWebElement(elementLabel);
		int counter = 0;
		while(element == null && counter < 120)
		{
			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			counter++;
			element = getWebElement(elementLabel);
		}
		if(element == null)
		{
			throw new Error("Cannot find: " + elementLabel);
		}
		
		if (browserSetting == "chrome" || browserSetting == "IE")
		{
			if(elementLabel == BTN_SUBMIT_LM_RUN_MODE)
			{
				try {
					Thread.sleep(4000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			else
			{
				while(element.isDisplayed() == false && counter < 120)
				{
					try {
						Thread.sleep(500);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					counter++;
				}
				
			}
		}
		try {
			element.click();
		} catch (Exception e) {
			e.printStackTrace();
			throw new Error("Clicking on " + elementLabel + " failed");
		}
		browser.switchTo().defaultContent();
	}
	
	public static boolean isRadioButtonSelected(String elementLabel) {
		browser.switchTo().frame(browser.findElement(By.id("content-2"))); 
		WebElement element = getWebElement(elementLabel);
		int counter = 0;
		while(element == null && counter < 120)
		{
			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			counter++;
			element = getWebElement(elementLabel);
		}
		try {
			Thread.sleep(500);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		boolean isButtonSelected = element.isSelected();
		browser.switchTo().defaultContent();
		return isButtonSelected;
	}
	
	public static void setTextField(String elementLabel, String text) {
		//browser.switchTo().frame(browser.findElement(By.id("content-2")));
		WebElement element = getWebElement(elementLabel);
		getWebElement(elementLabel).clear();
		element.sendKeys(text);
	//	browser.switchTo().defaultContent();
	}
	
	public static void setTextFieldForRunMode(String elementLabel, String text) {
		browser.switchTo().frame(browser.findElement(By.id("content-2")));
		WebElement element = getWebElement(elementLabel);
		element.click();
		element.sendKeys(text);
		browser.switchTo().defaultContent();
	}
	
	public static boolean isTextFieldDisplayed(String elementLabel) {
		browser.switchTo().frame(browser.findElement(By.id("content-2"))); 
		boolean isFieldDisplayed = getWebElement(elementLabel).isDisplayed();
		browser.switchTo().defaultContent();
		return isFieldDisplayed;
	}
	
	public static boolean isTextFieldGrayedOut(String elementLabel) {
		browser.switchTo().frame(browser.findElement(By.id("content-2"))); 
		boolean isFieldGrayedOut = !getWebElement(elementLabel).isEnabled();
		browser.switchTo().defaultContent();
		return isFieldGrayedOut;
	}
	
	public static void deleteTextField(String elementLabel) {
		browser.switchTo().frame(browser.findElement(By.id("content-2"))); 
		getWebElement(elementLabel).clear();
		browser.switchTo().defaultContent();
	}
	
	public static void verifyExists(String elementLabel) {
		browser.switchTo().defaultContent();
		if (getWebElement(elementLabel) == null)
		{
			fail(elementLabel + " not found");
		}
	}
	
	public static void verifyExists(String elementLabel, String contentId) {
		browser.switchTo().frame(browser.findElement(By.id(contentId))); 
		if (getWebElement(elementLabel) == null)
		{
			fail(elementLabel + " not found");
		}
		browser.switchTo().defaultContent();
	}
	
	public static WebDriver getBrowser(String browserType) {
		browserType = browserType.toLowerCase();
		WebDriver driver = null;
			if (browserType.equals("ie")) {
				System.setProperty("webdriver.ie.driver", IEDriverPath);
				driver = new InternetExplorerDriver();
			} else if (browserType.equals("chrome")) {
				System.setProperty("webdriver.chrome.driver", chromeDriverPath);
				Map<String, String> prefs = new Hashtable<>();
				prefs.put("download.prompt_for_download", "false");
				prefs.put("download.default_directory", getHostIDDirPath());                
				DesiredCapabilities capabilities = DesiredCapabilities.chrome();
				capabilities.setCapability("chrome.prefs", prefs);
				driver = new ChromeDriver(capabilities);
			}// else if (browserType.equals("marionette")) {
			else if (browserType.equals("firefox")) {
				FirefoxProfile firefoxProfile = new FirefoxProfile();
			    firefoxProfile.setPreference("browser.download.folderList",2);
			    firefoxProfile.setPreference("browser.download.manager.showWhenStarting",false);
			    firefoxProfile.setPreference("browser.download.dir",getHostIDDirPath());
			    firefoxProfile.setPreference("browser.helperApps.neverAsk.saveToDisk","application/xml,text/plain,text/xml,image/jpeg,application/octet-stream");
				driver = new FirefoxDriver(firefoxProfile);
				/*System.setProperty("webdriver.gecko.driver", FFDriverPath);
				DesiredCapabilities capabilities = DesiredCapabilities.firefox();
				capabilities.setCapability("marionette", true);
				driver = new MarionetteDriver(capabilities);*/
			}
		return driver;
	}

	public static void licenseFileContains(String sourceLicenseFilePath, String text) 
	{	      
		try 
		{
			FileInputStream fis = new FileInputStream(sourceLicenseFilePath);
			BufferedReader br = new BufferedReader(new InputStreamReader(fis));
			StringBuffer stringBuffer = new StringBuffer();
			String line = null;
			while((line = br.readLine()) != null)
			{
				stringBuffer.append(line).append("\n");
			}
			
	        br.close(); 
			
			if(!stringBuffer.toString().contains(text))
			{
				fail("Expected text: \"" + text + "\" not contained in \"" + sourceLicenseFilePath + "\"");
			}
					         
		} 
		catch(Exception e) 
		{
  			e.printStackTrace();
  			fail("Cannot find file " + sourceLicenseFilePath);
		}
	}
	
	public static boolean licenseFileContainsOneOfArray(String sourceLicenseFilePath, String[] text) 
	{	      
		try 
		{
			FileInputStream fis = new FileInputStream(sourceLicenseFilePath);
			BufferedReader br = new BufferedReader(new InputStreamReader(fis));
			StringBuffer stringBuffer = new StringBuffer();
			String line = null;
			while((line = br.readLine()) != null)
			{
				stringBuffer.append(line).append("\n");
			}
			
	        br.close(); 
			for (String mac :text){
				if(stringBuffer.toString().contains(mac) )
				{
					return true;
				}
			}
			fail("Expected text: \"" + text + "\" not contained in \"" + sourceLicenseFilePath + "\"");
			return false;
					         
		} 
		catch(Exception e) 
		{
  			e.printStackTrace();
  			fail("Cannot find file " + sourceLicenseFilePath);
  			return false;
		}
	}
	
	public static void licenseFileContainsIgnoreCase(String sourceLicenseFilePath, String text) 
	{	      
		try 
		{
			FileInputStream fis = new FileInputStream(sourceLicenseFilePath);
			BufferedReader br = new BufferedReader(new InputStreamReader(fis));
			StringBuffer stringBuffer = new StringBuffer();
			String line = null;
			while((line = br.readLine()) != null)
			{
				stringBuffer.append(line).append("\n");
			}
			
	        br.close(); 
			
			if(!stringBuffer.toString().toUpperCase().contains(text.toUpperCase()))
			{
				fail("Expected text: \"" + text + "\" not contained in \"" + sourceLicenseFilePath + "\"");
			}
					         
		} 
		catch(Exception e) 
		{
  			e.printStackTrace();
  			fail("Cannot find file " + sourceLicenseFilePath);
		}
	}
	
	public static void iniFileContains(String sourceLicenseFilePath, String text) 
	{	      
		try 
		{
			FileInputStream fis = new FileInputStream(sourceLicenseFilePath);
			BufferedReader br = new BufferedReader(new InputStreamReader(fis));
			StringBuffer stringBuffer = new StringBuffer();
			String line = null;
			while((line = br.readLine()) != null)
			{
				stringBuffer.append(line).append("\n");
			}
			
	        br.close(); 
			
			if(!stringBuffer.toString().contains(text))
			{
				fail("Expected text: \"" + text + "\" not contained in \"" + sourceLicenseFilePath + "\"");
			} 
		} 
		catch(Exception e) 
		{
  			e.printStackTrace();
		}
	}
	
	public static void iniFileDoesNotContain(String sourceLicenseFilePath, String text) 
	{	 
		File f = new File(sourceLicenseFilePath);
		if(f.exists() && !f.isDirectory()) {
			try 
			{
				FileInputStream fis = new FileInputStream(sourceLicenseFilePath);
				BufferedReader br = new BufferedReader(new InputStreamReader(fis));
				StringBuffer stringBuffer = new StringBuffer();
				String line = null;
				while((line = br.readLine()) != null)
				{
					stringBuffer.append(line).append("\n");
				}
				
		        br.close(); 
				
				if(stringBuffer.toString().contains(text))
				{
					fail("Expected text: \"" + text + "\" is contained in \"" + sourceLicenseFilePath + "\"");
				}         
			} 
			catch(Exception e) 
			{
	  			e.printStackTrace();
			}
		}
		else
			return; 
	}
	
	public static void takeScreenshot(String dest)	{
		String screenshotDest = dest + "screenshot.png";
		TakesScreenshot takesScreenshot = (TakesScreenshot) browser;

        File scrFile = takesScreenshot.getScreenshotAs(OutputType.FILE);
        File destFile = new File(screenshotDest);
        try {
        	Files.copy(scrFile.toPath(), destFile.toPath());
        } catch (IOException ioe) {
            throw new RuntimeException(ioe);
        }
	}
	
	public static void enterKey() throws AWTException {
		Robot r = new Robot();
		r.keyPress(KeyEvent.VK_ENTER);   
		r.keyRelease(KeyEvent.VK_ENTER);
	}
	
	public static void downArrow() throws AWTException {
		Robot r = new Robot();
		r.keyPress(KeyEvent.VK_DOWN);
		r.keyRelease(KeyEvent.VK_DOWN);
	}

	//=================================================================================================================
	// PRIVATE METHODS
	//=================================================================================================================
	//private static WebElement getWebElement(String elementLabel) {
	//	WebElement element = (elementLabel.contains("/")) ? 
	//			browser.findElement(By.xpath(elementLabel)) : browser.findElement(By.id(elementLabel));
	//	return element;
	//}
	
	private static WebElement getWebElement(String elementLabel) {
		WebElement element = (elementLabel.contains("/")) ? 
				(new WebDriverWait(browser, 120)).until(ExpectedConditions.presenceOfElementLocated(By.xpath(elementLabel))) :
					(new WebDriverWait(browser, 120)).until(ExpectedConditions.presenceOfElementLocated(By.id(elementLabel))) ;
		JavascriptExecutor je = (JavascriptExecutor) browser;
		je.executeScript("arguments[0].scrollIntoView(true);",element);
		return element;
	}
	
	
	private static String getOSType() {
		if (isWindowsOS()) return (System.getProperty("os.arch").contains("64")) ? "winx64" : "win32";
		else if (isLinuxOS()) return (System.getProperty("os.arch").contains("64")) ? "linx64" : "lin32";
		else if (isSunOS()) return "solus64";
        return null;
	}
	
	public static boolean isWindowsOS() {
		return (System.getProperty("os.name").contains("Windows")) ? true : false;
	}
	
	private static boolean isLinuxOS() {
		return (System.getProperty("os.name").contains("Linux")) ? true : false;		
	}
	
	private static boolean isSunOS() {
		return (System.getProperty("os.name").contains("SunOS") ||  
				System.getProperty("os.name").contains("Solaris")) ? true : false;		
	}
}
